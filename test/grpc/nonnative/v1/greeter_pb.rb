# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: nonnative/v1/greeter.proto

require 'google/protobuf'


descriptor_data = "\n\x1anonnative/v1/greeter.proto\x12\x0cnonnative.v1\"%\n\x0fSayHelloRequest\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\",\n\x10SayHelloResponse\x12\x18\n\x07message\x18\x01 \x01(\tR\x07message2]\n\x0eGreeterService\x12K\n\x08SayHello\x12\x1d.nonnative.v1.SayHelloRequest\x1a\x1e.nonnative.v1.SayHelloResponse\"\x00\x42\x16\xea\x02\x13Nonnative::Featuresb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Nonnative
  module Features
    SayHelloRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("nonnative.v1.SayHelloRequest").msgclass
    SayHelloResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("nonnative.v1.SayHelloResponse").msgclass
  end
end
